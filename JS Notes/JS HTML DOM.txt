The HTML DOM (Document Object Model)
-------------------------------------
When a web page is loaded, the browser creates a Document Object Model of the page.

The HTML DOM model is constructed as a tree of Objects:

image reference
	- https://www.w3schools.com/js/pic_htmltree.gif

With the object model, JavaScript gets all the power it needs to create dynamic HTML:

	- JavaScript can change all the HTML elements in the page
	- JavaScript can change all the HTML attributes in the page
	- JavaScript can change all the CSS styles in the page
	- JavaScript can remove existing HTML elements and attributes
	- JavaScript can add new HTML elements and attributes
	- JavaScript can react to all existing HTML events in the page
	- JavaScript can create new HTML events in the page

What is the HTML DOM?
---------------------
The HTML DOM is a standard object model and programming interface for HTML. It defines:

	- The HTML elements as objects
	- The properties of all HTML elements
	- The methods to access all HTML elements
	- The events for all HTML elements
	- In other words: The HTML DOM is a standard for how to get, change, add, or delete HTML elements.

The DOM Programming Interface
-----------------------------
The HTML DOM can be accessed with JavaScript (and with other programming languages).

In the DOM, all HTML elements are defined as objects.

The programming interface is the properties and methods of each object.

A property is a value that you can get or set (like changing the content of an HTML element).

A method is an action you can do (like add or deleting an HTML element).

Example
The following example changes the content (the innerHTML) of the <p> element with id="demo":

Example
<html>
<body>

<p id="demo"></p>

<script>
document.getElementById("demo").innerHTML = "Hello World!";
</script>

</body>
</html>

The HTML DOM Document Object
----------------------------
	- The document object represents your web page.

	- If you want to access any element in an HTML page, you always start with accessing the document object.

Below are some examples of how you can use the document object to access and manipulate HTML.

Finding HTML Elements
----------------------
Method						Description
-------						------------
document.getElementById(id)			Find an element by element id
document.getElementsByTagName(name)		Find elements by tag name
document.getElementsByClassName(name)		Find elements by class name

Changing HTML Elements
------------------------
Property					Description
--------					------------
element.innerHTML =  new html content		Change the inner HTML of an element
element.attribute = new value			Change the attribute value of an HTML element
element.style.property = new style		Change the style of an HTML element

Method						Description
------						------------
element.setAttribute(attribute, value)		Change the attribute value of an HTML element

Adding and Deleting Elements
----------------------------
Method						Description
-------						-----------
document.createElement(element)			Create an HTML element
document.removeChild(element)			Remove an HTML element
document.appendChild(element)			Add an HTML element
document.replaceChild(new, old)			Replace an HTML element
document.write(text)				Write into the HTML output stream

Adding Events Handlers
----------------------
Method								Description
------								------------
document.getElementById(id).onclick = function(){code}		Adding event handler code to an onclick event

Finding HTML Elements
---------------------
Often, with JavaScript, you want to manipulate HTML elements.

To do so, you have to find the elements first. There are several ways to do this:

	- Finding HTML elements by id
		const element = document.getElementById("intro");

	- Finding HTML elements by tag name
		const element = document.getElementsByTagName("p");

	- Finding HTML elements by class name
		const x = document.getElementsByClassName("intro");

	- Finding HTML elements by CSS selectors
		const x = document.querySelectorAll("p.intro");

	- Finding HTML elements by HTML object collections
		This example finds the form element with id="frm1", in the forms collection, and displays all element values:

		Example
			const x = document.forms["frm1"];
			let text = "";
			for (let i = 0; i < x.length; i++) {
			  text += x.elements[i].value + "<br>";
			}
			document.getElementById("demo").innerHTML = text;

DOM Nodes
----------
According to the W3C HTML DOM standard, everything in an HTML document is a node:

	- The entire document is a document node
	- Every HTML element is an element node
	- The text inside HTML elements are text nodes
	- Every HTML attribute is an attribute node (deprecated)
	- All comments are comment nodes

Navigating Between Nodes
------------------------
You can use the following node properties to navigate between nodes with JavaScript:

	parentNode
	childNodes[nodenumber]
	firstChild
	lastChild
	nextSibling
	previousSibling

Example
-------
myTitle = document.getElementById("demo").innerHTML;

Accessing the innerHTML property is the same as accessing the nodeValue of the first child:

myTitle = document.getElementById("demo").firstChild.nodeValue;

Reacting to Events
------------------
A JavaScript can be executed when an event occurs, like when a user clicks on an HTML element.

To execute code when a user clicks on an element, add JavaScript code to an HTML event attribute:

onclick=JavaScript

Examples of HTML events:
------------------------
	When a user clicks the mouse
	When a web page has loaded
	When an image has been loaded
	When the mouse moves over an element
	When an input field is changed
	When an HTML form is submitted
	When a user strokes a key

In this example, the content of the <h1> element is changed when a user clicks on it:

Example
-------
<!DOCTYPE html>
<html>
<body>

<h1 onclick="this.innerHTML = 'Ooops!'">Click on this text!</h1>

</body>
</html>

In this example, a function is called from the event handler:

Example
-------
<!DOCTYPE html>
<html>
<body>

<h1 onclick="changeText(this)">Click on this text!</h1>

<script>
function changeText(id) {
  id.innerHTML = "Ooops!";
}
</script>

</body>
</html>

Assign Events Using the HTML DOM
--------------------------------
The HTML DOM allows you to assign events to HTML elements using JavaScript:

Example
--------
Assign an onclick event to a button element:

<script>
document.getElementById("myBtn").onclick = displayDate;
</script>

JavaScript HTML DOM EventListener
---------------------------------

The addEventListener() method

Example
-------
Add an event listener that fires when a user clicks a button:

document.getElementById("myBtn").addEventListener("click", displayDate);

	- The addEventListener() method attaches an event handler to the specified element.
	
	- The addEventListener() method attaches an event handler to an element without overwriting existing event handlers.

	- You can add many event handlers to one element.

	- You can add many event handlers of the same type to one element, i.e two "click" events.

	- You can add event listeners to any DOM object not only HTML elements. i.e the window object.

	- The addEventListener() method makes it easier to control how the event reacts to bubbling.

	- When using the addEventListener() method, the JavaScript is separated from the HTML markup, for better readability and allows you to add event listeners even when you do not control the HTML markup.

	- You can easily remove an event listener by using the removeEventListener() method.

Event Bubbling and Capturing
----------------------------
Bubbling
--------
When an event happens on an element, it first runs the handlers on it, then on its parent, then all the way up on other ancestors.

Let’s say we have 3 nested elements FORM > DIV > P with a handler on each of them:

<style>
  body * {
    margin: 10px;
    border: 1px solid blue;
  }
</style>

<form onclick="alert('form')">FORM
  <div onclick="alert('div')">DIV
    <p onclick="alert('p')">P</p>
  </div>
</form>

A click on the inner <p> first runs onclick:

On that <p>.
Then on the outer <div>.
Then on the outer <form>.
And so on upwards till the document object.

Stopping bubbling
-----------------
	- A bubbling event goes from the target element straight up. Normally it goes upwards till <html>, and then to document object, and some events even reach window, calling all handlers on the path.

	- But any handler may decide that the event has been fully processed and stop the bubbling.

	- The method for it is event.stopPropagation().

	- For instance, here body.onclick doesn’t work if you click on <button>:

		<body onclick="alert(`the bubbling doesn't reach here`)">
		  <button onclick="event.stopPropagation()">Click me</button>
		</body>

event.stopImmediatePropagation()
--------------------------------
	- If an element has multiple event handlers on a single event, then even if one of them stops the bubbling, the other ones still execute.

	- In other words, event.stopPropagation() stops the move upwards, but on the current element all other handlers will run.

	- To stop the bubbling and prevent handlers on the current element from running, there’s a method event.stopImmediatePropagation(). After it no other handlers execute.

Don’t stop bubbling without a need!
-----------------------------------
	- Bubbling is convenient. Don’t stop it without a real need: obvious and architecturally well thought out.

	- Sometimes event.stopPropagation() creates hidden pitfalls that later may become problems.

Capturing
---------
There’s another phase of event processing called “capturing”. It is rarely used in real code, but sometimes can be useful.

The standard DOM Events describes 3 phases of event propagation:

	Capturing phase – the event goes down to the element.
	Target phase – the event reached the target element.
	Bubbling phase – the event bubbles up from the element.

Window
Document
<html>
<body>
<table>
<tbody>
<tr>
<tr>
<td>
Shady Grove
<td>
Aeolian
<td>
Over the River,
Charlie
<td>
Dorian

for a click on <td> the event first goes through the ancestors chain down to the element (capturing phase), then it reaches the target and triggers there (target phase), and then it goes up (bubbling phase), calling handlers on its way.

Before we only talked about bubbling, because the capturing phase is rarely used. Normally it is invisible to us.

Handlers added using on<event>-property or using HTML attributes or using two-argument addEventListener(event, handler) don’t know anything about capturing, they only run on the 2nd and 3rd phases.

To catch an event on the capturing phase, we need to set the handler capture option to true:

	elem.addEventListener(..., {capture: true})
	// or, just "true" is an alias to {capture: true}
	elem.addEventListener(..., true)
	
There are two possible values of the capture option:
---------------------------------------------------

If it’s false (default), then the handler is set on the bubbling phase.
If it’s true, then the handler is set on the capturing phase.

Note that while formally there are 3 phases, the 2nd phase (“target phase”: the event reached the element) is not handled separately: handlers on both capturing and bubbling phases trigger at that phase.

Summary of Bubbling and capturing
---------------------------------
	- When an event happens – the most nested element where it happens gets labeled as the “target element” (event.target).

	- Then the event moves down from the document root to event.target, calling handlers assigned with addEventListener(..., true) on the way (true is a shorthand for {capture: true}).
	
	- Then handlers are called on the target element itself.

	- Then the event bubbles up from event.target to the root, calling handlers assigned using on<event>, HTML attributes and addEventListener without the 3rd argument or with the 3rd argument false/{capture:false}.

	- Each handler can access event object properties:

		event.target – the deepest element that originated the event.
		event.currentTarget (=this) – the current element that handles the event (the one that has the handler on it)
		event.eventPhase – the current phase (capturing=1, target=2, bubbling=3).
	
	- Any event handler can stop the event by calling event.stopPropagation(), but that’s not recommended, because we can’t really be sure we won’t need it above, maybe for completely different things.

	- The capturing phase is used very rarely, usually we handle events on bubbling. And there’s a logic behind that.

	- In real world, when an accident happens, local authorities react first. They know best the area where it happened. Then higher-level authorities if needed.

	- The same for event handlers. The code that set the handler on a particular element knows maximum details about the element and what it does. A handler on a particular <td> may be suited for that exactly <td>, it knows everything about it, so it should get the chance first. Then its immediate parent also knows about the context, but a little bit less, and so on till the very top element that handles general concepts and runs the last one.
Working with Javascript functions
----------------------------------

Functions have 2 steps
	- defining the function
	- invoking the function

functions can be defined in 3 ways
----------------------------------
first way - normal functions
---------

function myFunction(a, b) {
  return a * b;
}

let ans = myFunction(4, 3); // invoking the function here

second way - anonymous functions, also know as function expressions
----------
const y = 40;

const x = function (a, b) {return a * b};

let ans = x(4, 3); // invoking

The function above is actually an anonymous function (a function without a name).

Functions stored in variables do not need function names. They are always invoked (called) using the variable name.

third way - arrow functions
---------

// ES5
var x = function(a, b) {
  return a * b;
}

// ES6
const x = (a, b) => a * b; // the x variable holds the function definition

Arrow functions allows a short syntax for writing function expressions.

You don't need the function keyword, the return keyword, and the curly brackets.

Arrow functions do not have their own "this". They are not well suited for defining object methods.

Arrow functions are not hoisted. They must be defined before they are used.

Using const is safer than using var, because a function expression is always constant value.
var x = (a, b) => a * b;
console.log(x(5,2)); // prints 10
x = 10;
console.log(x(5,2)); // error

const x = (a, b) => a * b; 
console.log(x(5,2)); // prints 10
x = 10; // error

You can only omit the return keyword and the curly brackets if the function is a single statement. Because of this, it might be a good habit to always keep them.


Callback functions
-------------------
A callback is a function passed as an argument to another function

This technique allows a function to call another function

A callback function can run after another function has finished.

example
-------

function myDisplayer(some) {
  document.getElementById("demo").innerHTML = some;
}

function myCalculator(num1, num2, myCallback) {
  let sum = num1 + num2;
  myCallback(sum);
}

myCalculator(5, 5, myDisplayer); // we are invoking myCalculator
				// the 3rd parameter is a function name, note that we dont use the ()
				// the 3rd parameter is the function definition of myDisplayer that we are passing as a parameter


// could do this as well without callback function
function myCalculator1(num1, num2) {
  return num1 + num2;
}

let sum = myCalculator1(5,5);
myDisplayer(sum);

The examples above are not very exciting.

Where callbacks really shine are in asynchronous functions, where one function has to wait for another function (like waiting for a file to load).

Synchronous vs Asynchronous
----------------------------
image references
    - https://www.koyeb.com/static/images/blog/sync-vs-async-schema.png
    
In JavaScript, we can handle asynchronous code using:

	- Callbacks
	- Promises
	- Async/Await functions

Real-World Examples
--------------------
Synchronous: You want a burger and decide to go to McDonald's. After you order the burger at the counter, you are told to wait as your burger is prepared. In this synchronous situation, you are stuck at the counter until you are served your burger.

Asynchronous: You want a burger and decide to go to Five Guys. You go to the counter and order a burger. Five Guys gives you a buzzer that will notify you once your burger is ready. In this asynchronous situation, you have more freedom while you wait.

Technical Examples
------------------

Asynchronous Processing
Batch-processing: is a data-processing method to handle large amounts of data asynchronously. With asynchronous batch-processing, large batches of data are processed at scheduled times to avoid blocking computing resources.

Long-running tasks: such as fulfilling an order placed on an e-commerce site are best handled asynchronously. There is no need to block resources while this task is executed.

Asynchronous Javascript
-----------------------

Asynchronous programming is a technique that enables your program to start a potentially long-running task, and then rather than having to wait until that task has finished, to be able to continue to be responsive to other events while the task runs.

When using the JavaScript function setTimeout(), you can specify a callback function to be executed on time-out:

setTimeout(myFunction, 3000); // setTimeout is an asynchronous call, so once setTimeout has finished execution, make sure to call callback myFunction

function myFunction() {
  document.getElementById("demo").innerHTML = "Hello there!!!";
}

In the example above, myFunction is used as a callback.

myFunction is passed to setTimeout() as an argument.

3000 is the number of milliseconds before time-out, so myFunction() will be called after 3 seconds.


fn1 ----> aysnronous function, maybe fetch the data from a file
fn2 ----> the code here should be executed after the asynchrounous fn1 has executed
		becuase fn2 needs the response/return data of fn1


drawbacks
---------
 if we have too many nested asynchronous calls , 
	it leads to the christmas tree problem
	difficult to maintain the code

Javascript Promises
-------------------

"Producing code" is code that can take some time

"Consuming code" is code that must wait for the result

A Promise is a JavaScript object that links producing code and consuming code

A JavaScript Promise object contains both the producing code and calls to the consuming code:

Example:

let myPromise = new Promise(function(myResolve, myReject) {
// "Producing Code" (May take some time) // placing the order for the burger at five guys or read data from a file or make an http call

  myResolve(); // when successful
  myReject();  // when error
});

// "Consuming Code" (Must wait for a fulfilled Promise)
myPromise.then(
  function(value) { /* code if successful , like consuming/receiving the burger once it is ready */ },
  function(error) { /* code if some error */ }
);


Async/await
-----------

"async and await make promises easier to write"

async makes a function return a Promise

await makes a function wait for a Promise

Async Syntax
-------------
The keyword async before a function makes the function return a promise:

Example
async function myFunction() {
  return "Hello";
}

Is the same as:

function myFunction() {
  return Promise.resolve("Hello");
}

Here is how to use the Promise:

myFunction().then(
  function(value) { /* code if successful */ },
  function(error) { /* code if some error */ }
);

Await Syntax
-------------
The keyword await before a function makes the function wait for a promise:

let value = await promise;

The await keyword can only be used inside an async function.

Example
async function myDisplay() {
  let myPromise = new Promise(function(resolve, reject) {
    resolve("Hello there !!");
  });
  document.getElementById("demo").innerHTML = await myPromise;
}

myDisplay();


AJAX
-----
AJAX is a developer's dream, because you can:

Read data from a web server - after the page has loaded
Update a web page without reloading the page
Send data to a web server - in the background

What is AJAX?
-------------
AJAX = Asynchronous JavaScript And XML.

AJAX is not a programming language.

AJAX just uses a combination of:
--------------------------------
A browser built-in XMLHttpRequest object (to request data from a web server)
JavaScript and HTML DOM (to display or use the data)

AJAX is a misleading name. AJAX applications might use XML to transport data, but it is equally common to transport data as plain text or JSON text.

AJAX allows web pages to be updated asynchronously by exchanging data with a web server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page.

Modern Browsers (Fetch API)
---------------------------
Modern Browsers can use Fetch API instead of the XMLHttpRequest Object.

The Fetch API interface allows web browser to make HTTP requests to web servers.

If you use the XMLHttpRequest Object, Fetch can do the same in a simpler way.

XMLHttpRequest
---------------

The keystone of AJAX is the XMLHttpRequest object.

Create an XMLHttpRequest object
Define a callback function
Open the XMLHttpRequest object
Send a Request to a server

Example
--------
// Create an XMLHttpRequest object
const xhttp = new XMLHttpRequest();

// Define a callback function
xhttp.onload = function() {
  // Here you can use the Data
}

// Send a request
xhttp.open("GET", "the_url");
xhttp.send();

Javascript Fetch API
--------------------
The Fetch API interface allows web browser to make HTTP requests to web servers.

No need for XMLHttpRequest anymore.

A Fetch API Example
-------------------
The example below fetches a file and displays the content:

Example
fetch(file)
.then(x => x.text())
.then(y => myDisplay(y));

Since Fetch is based on async and await, the example above might be easier to understand like this:

Example
async function getText(file) {
  let x = await fetch(file);
  let y = await x.text();
  myDisplay(y);
}